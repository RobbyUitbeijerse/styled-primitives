{"version":3,"file":"styled-primitives.cjs.production.min.js","sources":["../src/Box.tsx","../src/Card.tsx","../src/Column.tsx","../src/Flex.tsx","../src/Text.tsx","../src/Heading.tsx","../src/Space.tsx","../src/Contain.tsx","../src/Row.tsx","../src/grid.ts"],"sourcesContent":["import React, { HTMLAttributes } from 'react'\nimport styled from 'styled-components'\nimport {\n  background,\n  BackgroundProps,\n  color,\n  ColorProps,\n  compose,\n  flexbox,\n  FlexboxProps,\n  layout,\n  LayoutProps,\n  opacity,\n  OpacityProps,\n  position,\n  PositionProps,\n  space,\n  SpaceProps,\n  typography,\n  TypographyProps,\n  textStyle,\n  buttonStyle,\n  colorStyle,\n  TextStyleProps,\n  ColorStyleProps,\n  ButtonStyleProps,\n} from 'styled-system'\n\ntype BoxDoczProps = BackgroundProps &\n  ButtonStyleProps &\n  ColorProps &\n  ColorStyleProps &\n  FlexboxProps &\n  LayoutProps &\n  OpacityProps &\n  PositionProps &\n  SpaceProps &\n  TextStyleProps &\n  TypographyProps\n\nexport const BoxDocz: React.FC<BoxDoczProps> = () => <div />\n\nexport type BoxProps = BoxDoczProps & HTMLAttributes<any>\n\nconst boxStyles = compose(\n  background,\n  buttonStyle,\n  color,\n  colorStyle,\n  flexbox,\n  layout,\n  opacity,\n  position,\n  space,\n  textStyle,\n  typography\n)\n\nexport const Box = styled.div<BoxProps>(\n  {\n    boxSizing: 'border-box',\n  },\n  boxStyles\n)\n","import styled from 'styled-components'\nimport {\n  border,\n  BorderProps,\n  ShadowProps,\n  shadow,\n  compose,\n} from 'styled-system'\n\nimport { Box } from './Box'\n\nexport type CardProps = BorderProps & ShadowProps\n\nexport const Card = styled(Box)<CardProps>(\n  compose(\n    border,\n    shadow\n  )\n)\n","import styled from 'styled-components'\nimport { style } from 'styled-system'\n\nimport { Box, BoxProps } from './Box'\n\ntype ColumnProps = Omit<BoxProps, 'width'> & {\n  col?: number | (number | null | string)[]\n  inset?: number | (number | null | string)[]\n}\n\nfunction transformValue(n: string | number) {\n  if (!n || isNaN(n as any)) {\n    return n\n  }\n\n  const cols = Number(n)\n  return (cols / 12) * 100 + '%'\n}\n\nconst inset = style({\n  prop: 'inset',\n  cssProperty: 'marginLeft',\n  transformValue,\n})\n\nconst col = style({\n  prop: 'col',\n  cssProperty: 'width',\n  transformValue,\n})\n\nexport const Column = styled(Box)<ColumnProps>`\n  ${col}\n  ${inset}\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport { FlexboxProps } from 'styled-system'\n\nimport { Box, BoxProps } from './Box'\n\nexport type FlexProps = BoxProps\n\nexport const FlexDocz: React.FC<FlexboxProps> = () => <div />\n\nexport const Flex = styled(Box)({})\n\nFlex.defaultProps = {\n  display: 'flex',\n}\n","import React, { HTMLAttributes } from 'react'\nimport styled, { css } from 'styled-components'\nimport { TypographyProps } from 'styled-system'\n\nimport { Box, BoxProps } from './Box'\n\ntype TextDoczProps = TypographyProps & {\n  as?:\n    | 'p'\n    | 'small'\n    | 'strong'\n    | 'em'\n    | 'span'\n    | 'h1'\n    | 'h2'\n    | 'h3'\n    | 'h4'\n    | 'h5'\n    | 'h6'\n    | 'label'\n  target?: string\n  singleLine?: boolean\n}\n\nexport type TextProps = BoxProps &\n  TextDoczProps &\n  HTMLAttributes<HTMLParagraphElement> &\n  HTMLAttributes<HTMLLabelElement>\n\nexport const TextDocz: React.FC<TextDoczProps> = () => <div />\n\nexport const Text = styled(Box)<TextProps>`\n  ${props =>\n    props.singleLine &&\n    css`\n      max-width: 100%;\n      white-space: nowrap;\n      overflow: hidden;\n      text-overflow: ellipsis;\n    `}\n`\n\nText.defaultProps = {\n  as: 'span',\n}\n","import { HTMLAttributes } from 'react'\nimport styled from 'styled-components'\n\nimport { Text, TextProps } from './Text'\n\nexport type HeadingProps = TextProps &\n  HTMLAttributes<HTMLHeadingElement> & {\n    as?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6'\n  }\n\nexport const Heading = styled(Text)<HeadingProps>({})\n\nHeading.defaultProps = {\n  as: 'h2',\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { space, SpaceProps } from 'styled-system'\n\nconst classnames = (...args: any[]) => args.join(' ')\nconst getClassName = (el: any) => (el.props && el.props.className) || ''\n\nexport const StyledChildren: React.FC<{ className?: string } & SpaceProps> = ({\n  className,\n  children,\n}) => {\n  const styledChildren = React.Children.toArray(children).map((child: any) =>\n    React.cloneElement(child, {\n      className: classnames(getClassName(child), className),\n    })\n  )\n  return <>{styledChildren}</>\n}\n\nexport const Space = styled(StyledChildren)(space)\n","import { ThemeContext } from 'styled-components'\nimport { DisplayProps, HeightProps } from 'styled-system'\nimport { Box } from './Box'\nimport { useContext } from 'react'\nimport React from 'react'\n\ntype ContainProps = DisplayProps & HeightProps\n\nexport const Contain: React.FC<ContainProps> = props => {\n  const themeContext = useContext(ThemeContext)\n\n  return (\n    <Box\n      mx=\"auto\"\n      px={\n        themeContext &&\n        themeContext.grid &&\n        themeContext.grid.container &&\n        themeContext.grid.container.padding\n      }\n      maxWidth={\n        themeContext &&\n        themeContext.grid &&\n        themeContext.grid.container &&\n        themeContext.grid.container.maxWidth\n      }\n      {...props}\n    />\n  )\n}\n","import React, { FC, useContext } from 'react'\nimport { ThemeContext } from 'styled-components'\nimport { SpaceProps, WidthProps, FlexboxProps } from 'styled-system'\n\nimport { Flex } from './Flex'\nimport { Space } from './Space'\n\ninterface GutterProps {\n  gutter?: any[] | number\n}\n\ntype RowProps = FlexboxProps & GutterProps & SpaceProps & WidthProps\n\nexport const Row: FC<RowProps> = ({ gutter, children, ...props }) => {\n  const themeContext = useContext(ThemeContext)\n\n  if (!gutter && themeContext && themeContext.grid) {\n    gutter = themeContext.grid.gutter\n  }\n\n  if (!gutter) {\n    gutter = 15\n  }\n\n  const spacing =\n    gutter && Array.isArray(gutter)\n      ? gutter.map(space => space && space / 2)\n      : gutter / 2\n\n  const mx =\n    gutter && Array.isArray(gutter)\n      ? gutter.map(space => space && (space / 2) * -1)\n      : (gutter / 2) * -1\n\n  // const filteredChildren = React.Children.toArray(children).filter(Boolean)\n\n  return (\n    <Flex mx={mx} flexWrap=\"wrap\" {...props}>\n      <Space px={spacing}>{children}</Space>\n    </Flex>\n  )\n}\n","export interface ThemeGridContainer {\n  maxWidth: number\n  padding: number | any[]\n}\n\nexport interface ThemeGrid {\n  gutter: number | any[]\n  container: ThemeGridContainer\n}\n\nexport const defaultGrid = {\n  gutter: [15, null, 30],\n  container: {\n    maxWidth: 1280,\n    padding: [15, null, 60],\n  },\n}\n"],"names":["boxStyles","compose","background","buttonStyle","color","colorStyle","flexbox","layout","opacity","position","space","textStyle","typography","Box","styled","div","boxSizing","Card","border","shadow","transformValue","n","isNaN","Number","inset","style","prop","cssProperty","col","Column","Flex","defaultProps","display","Text","props","singleLine","css","as","Heading","classnames","args","join","StyledChildren","className","styledChildren","React","Children","toArray","children","map","child","cloneElement","el","createElement","Fragment","Space","themeContext","useContext","ThemeContext","Object","assign","mx","px","grid","container","padding","maxWidth","gutter","spacing","Array","isArray","flexWrap"],"mappings":"kLA4CMA,EAAYC,UAChBC,aACAC,cACAC,QACAC,aACAC,UACAC,SACAC,UACAC,WACAC,QACAC,YACAC,cAGWC,EAAMC,EAAOC,8DAAPD,CACjB,CACEE,UAAW,cAEbhB,GCjDWiB,EAAOH,EAAOD,0DAAPC,CAClBb,UACEiB,SACAC,WCNJ,SAASC,EAAeC,UACjBA,GAAKC,MAAMD,GACPA,EAGIE,OAAOF,GACL,GAAM,IAAM,IAG7B,IAAMG,EAAQC,QAAM,CAClBC,KAAM,QACNC,YAAa,aACbP,eAAAA,IAGIQ,EAAMH,QAAM,CAChBC,KAAM,MACNC,YAAa,QACbP,eAAAA,IAGWS,EAASf,EAAOD,gEAAPC,aAClBc,EACAJ,GCvBSM,EAAOhB,EAAOD,0DAAPC,CAAY,IAEhCgB,EAAKC,aAAe,CAClBC,QAAS,YCkBEC,EAAOnB,EAAOD,8DAAPC,UAChB,SAAAoB,UACAA,EAAMC,YACNC,wFAQJH,EAAKF,aAAe,CAClBM,GAAI,YCjCOC,EAAUxB,EAAOmB,iEAAPnB,CAA2B,IAElDwB,EAAQP,aAAe,CACrBM,GAAI,MCTN,IAAME,EAAa,sCAAIC,2BAAAA,yBAAgBA,EAAKC,KAAK,MAGpCC,EAAgE,gBAC3EC,IAAAA,UAGMC,EAAiBC,EAAMC,SAASC,UAFtCC,UAEwDC,KAAK,SAAAC,UAC3DL,EAAMM,aAAaD,EAAO,CACxBP,UAAWJ,GARKa,EAQmBF,EARNE,EAAGlB,OAASkB,EAAGlB,MAAMS,WAAc,IAQrBA,KAR3B,IAAAS,YAWbP,EAAAQ,cAAAR,EAAAS,SAAA,KAAGV,IAGCW,EAAQzC,EAAO4B,2DAAP5B,CAAuBJ,uCNqBG,kBAAMmC,EAAAQ,cAAA,MAAA,uDOhCN,SAAAnB,OACvCsB,EAAeC,aAAWC,uBAG9Bb,EAAAQ,cAACxC,EAAG8C,OAAAC,OAAA,CACFC,GAAG,OACHC,GACEN,GACAA,EAAaO,MACbP,EAAaO,KAAKC,WAClBR,EAAaO,KAAKC,UAAUC,QAE9BC,SACEV,GACAA,EAAaO,MACbP,EAAaO,KAAKC,WAClBR,EAAaO,KAAKC,UAAUE,UAE1BhC,qCJlBsC,kBAAMW,EAAAQ,cAAA,MAAA,qCKKrB,gBAAGc,IAAAA,OAAQnB,IAAAA,SAAad,8JACjDsB,EAAeC,aAAWC,iBAE3BS,GAAUX,GAAgBA,EAAaO,OAC1CI,EAASX,EAAaO,KAAKI,QAGxBA,IACHA,EAAS,QAGLC,EACJD,GAAUE,MAAMC,QAAQH,GACpBA,EAAOlB,KAAI,SAAAvC,UAASA,GAASA,EAAQ,KACrCyD,EAAS,EAETN,EACJM,GAAUE,MAAMC,QAAQH,GACpBA,EAAOlB,KAAI,SAAAvC,UAASA,GAAUA,EAAQ,GAAM,KAC3CyD,EAAS,GAAM,SAKpBtB,EAAAQ,cAACvB,EAAI6B,OAAAC,OAAA,CAACC,GAAIA,EAAIU,SAAS,QAAWrC,GAChCW,EAAAQ,cAACE,EAAK,CAACO,GAAIM,GAAUpB,8EJTsB,kBAAMH,EAAAQ,cAAA,MAAA,2BKnB5B,CACzBc,OAAQ,CAAC,GAAI,KAAM,IACnBH,UAAW,CACTE,SAAU,KACVD,QAAS,CAAC,GAAI,KAAM"}