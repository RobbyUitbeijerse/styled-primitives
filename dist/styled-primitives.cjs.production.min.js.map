{"version":3,"file":"styled-primitives.cjs.production.min.js","sources":["../src/Box.tsx","../src/Card.tsx","../src/Column.tsx","../src/Flex.tsx","../src/Text.tsx","../src/Heading.tsx","../src/Space.tsx","../src/Row.tsx","../src/Contain.tsx","../src/grid.ts"],"sourcesContent":["import React, { HTMLAttributes } from 'react'\nimport styled from 'styled-components'\nimport {\n  background,\n  BackgroundProps,\n  color,\n  ColorProps,\n  compose,\n  flexbox,\n  FlexboxProps,\n  layout,\n  LayoutProps,\n  opacity,\n  OpacityProps,\n  position,\n  PositionProps,\n  space,\n  SpaceProps,\n  typography,\n  TypographyProps,\n} from 'styled-system'\n\ntype BoxDoczProps = BackgroundProps &\n  ColorProps &\n  FlexboxProps &\n  LayoutProps &\n  OpacityProps &\n  PositionProps &\n  SpaceProps &\n  TypographyProps\n\nexport const BoxDocz: React.FC<BoxDoczProps> = () => <div />\n\nexport type BoxProps = BoxDoczProps & HTMLAttributes<any>\n\nexport const Box = styled.div<BoxProps>`\n  box-sizing: border-box;\n  ${compose(\n    background,\n    color,\n    flexbox,\n    layout,\n    opacity,\n    position,\n    space,\n    typography\n  )}\n`\n","import styled from 'styled-components'\nimport {\n  border,\n  BorderProps,\n  ShadowProps,\n  shadow,\n  compose,\n} from 'styled-system'\n\nimport { Box } from './Box'\n\ntype CardProps = BorderProps & ShadowProps\n\nexport const Card = styled(Box)<CardProps>(\n  compose(\n    border,\n    shadow\n  )\n)\n","import React, { FC } from 'react'\nimport styled from 'styled-components'\nimport { style } from 'styled-system'\n\nimport { Box, BoxProps } from './Box'\n\ntype ColumnProps = Omit<BoxProps, 'width'> & {\n  col?: number | (number | null | string)[]\n  inset?: number | (number | null | string)[]\n}\n\nfunction transformValue(n: string | number) {\n  if (!n || isNaN(n as any)) {\n    return n\n  }\n\n  const cols = Number(n)\n  return (cols / 12) * 100 + '%'\n}\n\nconst inset = style({\n  prop: 'inset',\n  cssProperty: 'marginLeft',\n  transformValue,\n})\n\nconst col = style({\n  prop: 'col',\n  cssProperty: 'width',\n  transformValue,\n})\n\nconst StyledColumn = styled(Box)<ColumnProps>`\n  ${col}\n  ${inset}\n`\n\nexport const Column: FC<ColumnProps> = props => {\n  return <StyledColumn {...props}>{props.children}</StyledColumn>\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { FlexboxProps, flex, compose } from 'styled-system'\n\nimport { Box, BoxProps } from './Box'\n\nexport type FlexProps = BoxProps\n\nexport const FlexDocz: React.FC<FlexboxProps> = () => <div />\n\nexport const Flex = styled(Box)<FlexProps>`\n  display: flex;\n  ${compose(flex)}\n`\n","import React, { HTMLAttributes } from 'react'\nimport styled, { css } from 'styled-components'\nimport { TypographyProps } from 'styled-system'\n\nimport { Box, BoxProps } from './Box'\n\ntype TextDoczProps = TypographyProps & {\n  as?:\n    | 'p'\n    | 'small'\n    | 'strong'\n    | 'em'\n    | 'span'\n    | 'h1'\n    | 'h2'\n    | 'h3'\n    | 'h4'\n    | 'h5'\n    | 'h6'\n    | 'label'\n  target?: string\n  singleLine?: boolean\n}\n\nexport type TextProps = BoxProps &\n  TextDoczProps &\n  HTMLAttributes<HTMLParagraphElement> &\n  HTMLAttributes<HTMLLabelElement>\n\nexport const TextDocz: React.FC<TextDoczProps> = () => <div />\n\nconst StyledText = styled(Box)<TextProps>`\n  ${props =>\n    props.singleLine &&\n    css`\n      max-width: 100%;\n      white-space: nowrap;\n      overflow: hidden;\n      text-overflow: ellipsis;\n    `}\n`\n\nexport const Text: React.FC<TextProps> = ({\n  as = 'span',\n  children,\n  ...props\n}) => (\n  <StyledText as={as} {...props}>\n    {children}\n  </StyledText>\n)\n","import React, { HTMLAttributes } from 'react'\nimport styled from 'styled-components'\n\nimport { Text, TextProps } from './Text'\n\nexport type HeadingProps = TextProps &\n  HTMLAttributes<HTMLHeadingElement> & {\n    as?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6'\n  }\n\nconst StyledHeading = styled(Text)<HeadingProps>`\n  margin: 0px;\n`\n\nexport const Heading: React.FC<HeadingProps> = ({\n  as = 'h2',\n  children,\n  ...props\n}) => (\n  <StyledHeading as={as} {...props}>\n    {children}\n  </StyledHeading>\n)\n","import React from 'react'\nimport styled from 'styled-components'\nimport { space, SpaceProps } from 'styled-system'\n\nconst classnames = (...args: any[]) => args.join(' ')\nconst getClassName = (el: any) => (el.props && el.props.className) || ''\n\nexport const StyledChildren: React.FC<{ className?: string } & SpaceProps> = ({\n  className,\n  children,\n}) => {\n  const styledChildren = React.Children.toArray(children).map((child: any) =>\n    React.cloneElement(child, {\n      className: classnames(getClassName(child), className),\n    })\n  )\n  return <>{styledChildren}</>\n}\n\nexport const Space = styled(StyledChildren)(space)\n","import React, { FC, useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\nimport {\n  flexWrap,\n  SpaceProps,\n  style,\n  WidthProps,\n  FlexboxProps,\n} from 'styled-system'\n\nimport { Flex } from './Flex'\nimport { Space } from './Space'\n\ninterface GutterProps {\n  gutter?: any[] | number\n}\n\ntype RowProps = FlexboxProps & GutterProps & SpaceProps & WidthProps\n\nconst gutterLeft = style({\n  prop: 'gutter',\n  cssProperty: 'marginLeft',\n  transformValue: n => {\n    return (Number(n) / 2) * -1\n  },\n})\n\nconst gutterRight = style({\n  prop: 'gutter',\n  cssProperty: 'marginRight',\n  transformValue: n => {\n    return (Number(n) / 2) * -1\n  },\n})\n\nconst StyledRow = styled(Flex)<RowProps>`\n  flex-wrap: wrap;\n  ${flexWrap}\n  ${gutterLeft}\n  ${gutterRight}\n`\n\nexport const Row: FC<RowProps> = ({ gutter, children, ...props }) => {\n  const themeContext = useContext(ThemeContext)\n\n  if (!gutter && themeContext && themeContext.grid) {\n    gutter = themeContext.grid.gutter\n  }\n\n  if (!gutter) {\n    gutter = 15\n  }\n\n  const spacing =\n    gutter && Array.isArray(gutter)\n      ? gutter.map(space => space && space / 2)\n      : gutter / 2\n\n  return (\n    <StyledRow gutter={gutter} {...props}>\n      <Space px={spacing}>{children}</Space>\n    </StyledRow>\n  )\n}\n","import { ThemeContext } from 'styled-components'\nimport { DisplayProps, HeightProps } from 'styled-system'\nimport { Box } from './Box'\nimport { useContext } from 'react'\nimport React from 'react'\n\ntype ContainProps = DisplayProps & HeightProps\n\nexport const Contain: React.FC<ContainProps> = props => {\n  const themeContext = useContext(ThemeContext)\n\n  return (\n    <Box\n      mx=\"auto\"\n      px={\n        themeContext &&\n        themeContext.grid &&\n        themeContext.grid.container &&\n        themeContext.grid.container.padding\n      }\n      maxWidth={\n        themeContext &&\n        themeContext.grid &&\n        themeContext.grid.container &&\n        themeContext.grid.container.maxWidth\n      }\n      {...props}\n    />\n  )\n}\n","export interface ThemeGridContainer {\n  maxWidth: number\n  padding: number | any[]\n}\n\nexport interface ThemeGrid {\n  gutter: number | any[]\n  container: ThemeGridContainer\n}\n\nexport const defaultGrid = {\n  gutter: [15, null, 30],\n  container: {\n    maxWidth: 1280,\n    padding: [15, null, 60],\n  },\n}\n"],"names":["Box","styled","div","compose","background","color","flexbox","layout","opacity","position","space","typography","Card","border","shadow","transformValue","n","isNaN","Number","inset","style","prop","cssProperty","col","StyledColumn","Flex","flex","StyledText","props","singleLine","css","Text","as","children","React","StyledHeading","classnames","args","join","StyledChildren","className","styledChildren","Children","toArray","map","child","cloneElement","el","Space","gutterLeft","gutterRight","StyledRow","flexWrap","themeContext","useContext","ThemeContext","mx","px","grid","container","padding","maxWidth","gutter","spacing","Array","isArray"],"mappings":"kLAmCaA,EAAMC,EAAOC,8DAAPD,+BAEfE,UACAC,aACAC,QACAC,UACAC,SACAC,UACAC,WACAC,QACAC,eChCSC,EAAOX,EAAOD,0DAAPC,CAClBE,UACEU,SACAC,WCLJ,SAASC,EAAeC,UACjBA,GAAKC,MAAMD,GACPA,EAGIE,OAAOF,GACL,GAAM,IAAM,IAG7B,IAAMG,EAAQC,QAAM,CAClBC,KAAM,QACNC,YAAa,aACbP,eAAAA,IAGIQ,EAAMH,QAAM,CAChBC,KAAM,MACNC,YAAa,QACbP,eAAAA,IAGIS,EAAevB,EAAOD,8EAAPC,aACjBsB,EACAJ,GCxBSM,EAAOxB,EAAOD,0DAAPC,sBAEhBE,UAAQuB,iJCmBNC,EAAa1B,EAAOD,0EAAPC,SACf,SAAA2B,UACAA,EAAMC,YACNC,uFAQSC,EAA4B,oBACvCC,GAAAA,aAAK,SACLC,IAAAA,SACGL,gCAEHM,gBAACP,iBAAWK,GAAIA,GAAQJ,GACrBK,ICtCCE,EAAgBlC,EAAO8B,gFAAP9B,kBCNhBmC,EAAa,sCAAIC,2BAAAA,yBAAgBA,EAAKC,KAAK,MAGpCC,EAAgE,gBAC3EC,IAAAA,UAGMC,EAAiBP,EAAMQ,SAASC,UAFtCV,UAEwDW,IAAI,SAACC,UAC3DX,EAAMY,aAAaD,EAAO,CACxBL,UAAWJ,GARKW,EAQmBF,EARNE,EAAGnB,OAASmB,EAAGnB,MAAMY,WAAc,IAQrBA,KAR5B,IAACO,WAWbb,gCAAGO,IAGCO,EAAQ/C,EAAOsC,2DAAPtC,CAAuBS,SCAtCuC,EAAa7B,QAAM,CACvBC,KAAM,SACNC,YAAa,aACbP,eAAgB,SAAAC,UACNE,OAAOF,GAAK,GAAM,KAIxBkC,EAAc9B,QAAM,CACxBC,KAAM,SACNC,YAAa,cACbP,eAAgB,SAAAC,UACNE,OAAOF,GAAK,GAAM,KAIxBmC,EAAYlD,EAAOwB,wEAAPxB,gCAEdmD,WACAH,EACAC,iCPR2C,kBAAMhB,2DEMd,SAAAN,UAC9BM,gBAACV,mBAAiBI,GAAQA,EAAMK,2BM9BM,SAAAL,OACvCyB,EAAeC,aAAWC,uBAG9BrB,gBAAClC,iBACCwD,GAAG,OACHC,GACEJ,GACAA,EAAaK,MACbL,EAAaK,KAAKC,WAClBN,EAAaK,KAAKC,UAAUC,QAE9BC,SACER,GACAA,EAAaK,MACbL,EAAaK,KAAKC,WAClBN,EAAaK,KAAKC,UAAUE,UAE1BjC,qCLlBsC,kBAAMM,6CEMP,oBAC7CF,GAAAA,aAAK,OACLC,IAAAA,SACGL,gCAEHM,gBAACC,iBAAcH,GAAIA,GAAQJ,GACxBK,gBEsB4B,gBAAG6B,IAAAA,OAAQ7B,IAAAA,SAAaL,6BACjDyB,EAAeC,aAAWC,iBAE3BO,GAAUT,GAAgBA,EAAaK,OAC1CI,EAAST,EAAaK,KAAKI,QAGxBA,IACHA,EAAS,QAGLC,EACJD,GAAUE,MAAMC,QAAQH,GACpBA,EAAOlB,IAAI,SAAAlC,UAASA,GAASA,EAAQ,IACrCoD,EAAS,SAGb5B,gBAACiB,iBAAUW,OAAQA,GAAYlC,GAC7BM,gBAACc,GAAMS,GAAIM,GAAU9B,8EH/BsB,kBAAMC,iDKnB5B,CACzB4B,OAAQ,CAAC,GAAI,KAAM,IACnBH,UAAW,CACTE,SAAU,KACVD,QAAS,CAAC,GAAI,KAAM"}