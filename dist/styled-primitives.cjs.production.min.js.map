{"version":3,"file":"styled-primitives.cjs.production.min.js","sources":["../src/Box.tsx","../src/Card.tsx","../src/Column.tsx","../src/Flex.tsx","../src/Text.tsx","../src/Heading.tsx","../src/Space.tsx","../src/Row.tsx","../src/Contain.tsx","../src/grid.ts"],"sourcesContent":["import React, { HTMLAttributes } from 'react'\nimport styled from 'styled-components'\nimport {\n  background,\n  BackgroundProps,\n  bottom,\n  BottomProps,\n  color,\n  ColorProps,\n  display,\n  DisplayProps,\n  flex,\n  FlexProps,\n  fontSize,\n  FontSizeProps,\n  fontWeight,\n  FontWeightProps,\n  height,\n  HeightProps,\n  justifyContent,\n  JustifyContentProps,\n  left,\n  LeftProps,\n  maxHeight,\n  MaxHeightProps,\n  maxWidth,\n  MaxWidthProps,\n  minHeight,\n  MinHeightProps,\n  minWidth,\n  MinWidthProps,\n  opacity,\n  OpacityProps,\n  order,\n  OrderProps,\n  position,\n  PositionProps,\n  right,\n  RightProps,\n  space,\n  SpaceProps,\n  textAlign,\n  TextAlignProps,\n  top,\n  TopProps,\n  width,\n  WidthProps,\n  zIndex,\n  ZIndexProps,\n} from 'styled-system'\n\ntype BoxDoczProps = BackgroundProps &\n  BottomProps &\n  ColorProps &\n  DisplayProps &\n  FlexProps &\n  FontSizeProps &\n  FontWeightProps &\n  HeightProps &\n  JustifyContentProps &\n  LeftProps &\n  MaxHeightProps &\n  MaxWidthProps &\n  MinHeightProps &\n  MinWidthProps &\n  OpacityProps &\n  OrderProps &\n  PositionProps &\n  RightProps &\n  SpaceProps &\n  TextAlignProps &\n  TopProps &\n  WidthProps &\n  ZIndexProps\n\nexport const BoxDocz: React.FC<BoxDoczProps> = () => <div />\n\nexport type BoxProps = BoxDoczProps & HTMLAttributes<any>\n\nexport const Box = styled.div<BoxProps>`\n  box-sizing: border-box;\n  ${background}\n  ${bottom}\n  ${color}\n  ${display}\n  ${flex}\n  ${fontSize}\n  ${fontWeight}\n  ${height}\n  ${justifyContent}\n  ${left}\n  ${maxHeight}\n  ${maxWidth}\n  ${minHeight}\n  ${minWidth}\n  ${opacity}\n  ${order}\n  ${position}\n  ${right}\n  ${space}\n  ${textAlign}\n  ${top}\n  ${width}\n  ${zIndex}\n`\n","import styled from 'styled-components'\nimport {\n  backgroundImage,\n  BackgroundImageProps,\n  backgroundPosition,\n  BackgroundPositionProps,\n  backgroundRepeat,\n  BackgroundRepeatProps,\n  backgroundSize,\n  BackgroundSizeProps,\n  border,\n  borderBottom,\n  BorderBottomProps,\n  borderColor,\n  BorderColorProps,\n  borderLeft,\n  BorderLeftProps,\n  BorderProps,\n  borderRadius,\n  BorderRadiusProps,\n  borderRight,\n  BorderRightProps,\n  borderTop,\n  BorderTopProps,\n  boxShadow,\n  BoxShadowProps,\n} from 'styled-system'\n\nimport { Box } from './Box'\n\ntype CardProps = BackgroundImageProps &\n  BackgroundPositionProps &\n  BackgroundRepeatProps &\n  BackgroundSizeProps &\n  BorderBottomProps &\n  BorderColorProps &\n  BorderLeftProps &\n  BorderProps &\n  BorderRadiusProps &\n  BorderRightProps &\n  BorderTopProps &\n  BoxShadowProps\n\nexport const Card = styled(Box)<CardProps>`\n  ${backgroundImage}\n  ${backgroundPosition}\n  ${backgroundRepeat}\n  ${backgroundSize}\n  ${border}\n  ${borderBottom}\n  ${borderColor}\n  ${borderLeft}\n  ${borderRadius}\n  ${borderRight}\n  ${borderTop}\n  ${boxShadow}\n`\n","import React, { FC } from 'react'\nimport styled from 'styled-components'\nimport { style } from 'styled-system'\n\nimport { Box, BoxProps } from './Box'\n\ntype ColumnProps = Omit<BoxProps, 'width'> & {\n  col?: number | (number | null | string)[]\n  inset?: number | (number | null | string)[]\n}\n\nfunction transformValue(n: string | number) {\n  if (!n || isNaN(n as any)) {\n    return n\n  }\n\n  const cols = Number(n)\n  return (cols / 12) * 100 + '%'\n}\n\nconst inset = style({\n  prop: 'inset',\n  cssProperty: 'marginLeft',\n  transformValue,\n})\n\nconst col = style({\n  prop: 'col',\n  cssProperty: 'width',\n  transformValue,\n})\n\nconst StyledColumn = styled(Box)<ColumnProps>`\n  ${col}\n  ${inset}\n`\n\nexport const Column: FC<ColumnProps> = props => {\n  return <StyledColumn {...props}>{props.children}</StyledColumn>\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport {\n  alignItems,\n  AlignItemsProps,\n  flexDirection,\n  FlexDirectionProps,\n  flexWrap,\n  FlexWrapProps,\n  justifyContent,\n  JustifyContentProps,\n} from 'styled-system'\n\nimport { Box, BoxProps } from './Box'\n\ntype FlexDoczProps = AlignItemsProps &\n  FlexDirectionProps &\n  FlexWrapProps &\n  JustifyContentProps\nexport type FlexProps = BoxProps & FlexDoczProps\n\nexport const FlexDocz: React.FC<FlexDoczProps> = () => <div />\n\nexport const Flex = styled(Box)<FlexProps>`\n  display: flex;\n  ${alignItems}\n  ${flexDirection}\n  ${flexWrap}\n  ${justifyContent}\n`\n","import React, { HTMLAttributes } from 'react'\nimport styled, { css } from 'styled-components'\nimport {\n  fontFamily,\n  letterSpacing,\n  LetterSpacingProps,\n  lineHeight,\n  LineHeightProps,\n  TextAlignProps,\n} from 'styled-system'\n\nimport { Box, BoxProps } from './Box'\n\ntype TextDoczProps = LetterSpacingProps &\n  LineHeightProps &\n  TextAlignProps & {\n    as?:\n      | 'p'\n      | 'small'\n      | 'strong'\n      | 'em'\n      | 'span'\n      | 'h1'\n      | 'h2'\n      | 'h3'\n      | 'h4'\n      | 'h5'\n      | 'h6'\n      | 'label'\n    target?: string\n    singleLine?: boolean\n  }\n\nexport type TextProps = BoxProps &\n  TextDoczProps &\n  HTMLAttributes<HTMLParagraphElement> &\n  HTMLAttributes<HTMLLabelElement>\n\nexport const TextDocz: React.FC<TextDoczProps> = () => <div />\n\nconst StyledText = styled(Box)<TextProps>`\n  \n  ${props =>\n    props.singleLine &&\n    css`\n      max-width: 100%;\n      white-space: nowrap;\n      overflow: hidden;\n      text-overflow: ellipsis;\n    `}\n\n  ${fontFamily}\n  ${letterSpacing}\n  ${lineHeight}\n\n`\n\nexport const Text: React.FC<TextProps> = ({\n  as = 'span',\n  children,\n  ...props\n}) => (\n  <StyledText as={as} {...props}>\n    {children}\n  </StyledText>\n)\n","import React, { HTMLAttributes } from 'react'\nimport styled from 'styled-components'\nimport {\n  color,\n  fontSize,\n  fontWeight,\n  opacity,\n  space,\n  width,\n} from 'styled-system'\n\nimport { Text, TextProps } from './Text'\n\nexport type HeadingProps = TextProps &\n  HTMLAttributes<HTMLHeadingElement> & {\n    as?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6'\n  }\n\nconst StyledHeading = styled(Text)<HeadingProps>`\n  margin: 0px;\n  line-height: 1.2;\n  ${color}\n  ${fontSize}\n  ${fontWeight}\n  ${space}\n  ${width}\n  ${opacity}\n`\n\nexport const Heading: React.FC<HeadingProps> = ({\n  as = 'h2',\n  children,\n  ...props\n}) => (\n  <StyledHeading as={as} {...props}>\n    {children}\n  </StyledHeading>\n)\n","import React from 'react'\nimport styled from 'styled-components'\nimport { space, SpaceProps } from 'styled-system'\n\nconst classnames = (...args: any[]) => args.join(' ')\nconst getClassName = (el: any) => (el.props && el.props.className) || ''\n\nexport const StyledChildren: React.FC<{ className?: string } & SpaceProps> = ({\n  className,\n  children,\n}) => {\n  const styledChildren = React.Children.toArray(children).map((child: any) =>\n    React.cloneElement(child, {\n      className: classnames(getClassName(child), className),\n    })\n  )\n  return <>{styledChildren}</>\n}\n\nexport const Space = styled(StyledChildren)(space)\n","import React, { FC, useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\nimport {\n  AlignItemsProps,\n  FlexDirectionProps,\n  FlexProps,\n  flexWrap,\n  FlexWrapProps,\n  JustifyContentProps,\n  SpaceProps,\n  style,\n  WidthProps,\n} from 'styled-system'\n\nimport { Flex } from './Flex'\nimport { Space } from './Space'\n\ninterface GutterProps {\n  gutter?: any[] | number\n}\n\ntype RowProps = AlignItemsProps &\n  FlexDirectionProps &\n  FlexProps &\n  FlexWrapProps &\n  GutterProps &\n  JustifyContentProps &\n  SpaceProps &\n  WidthProps\n\nconst gutterLeft = style({\n  prop: 'gutter',\n  cssProperty: 'marginLeft',\n  transformValue: n => {\n    return (Number(n) / 2) * -1\n  },\n})\n\nconst gutterRight = style({\n  prop: 'gutter',\n  cssProperty: 'marginRight',\n  transformValue: n => {\n    return (Number(n) / 2) * -1\n  },\n})\n\nconst StyledRow = styled(Flex)<RowProps>`\n  flex-wrap: wrap;\n  ${flexWrap}\n  ${gutterLeft}\n  ${gutterRight}\n`\n\nexport const Row: FC<RowProps> = ({ gutter, children, ...props }) => {\n  const themeContext = useContext(ThemeContext)\n\n  if (!gutter && themeContext && themeContext.grid) {\n    gutter = themeContext.grid.gutter\n  }\n\n  if (!gutter) {\n    gutter = 15\n  }\n\n  const spacing =\n    gutter && Array.isArray(gutter)\n      ? gutter.map(space => space && space / 2)\n      : gutter / 2\n\n  return (\n    <StyledRow gutter={gutter} {...props}>\n      <Space px={spacing}>{children}</Space>\n    </StyledRow>\n  )\n}\n","import { ThemeContext } from 'styled-components'\nimport { DisplayProps, HeightProps } from 'styled-system'\nimport { Box } from './Box'\nimport { useContext } from 'react'\nimport React from 'react'\n\ntype ContainProps = DisplayProps & HeightProps\n\nexport const Contain: React.FC<ContainProps> = props => {\n  const themeContext = useContext(ThemeContext)\n\n  return (\n    <Box\n      mx=\"auto\"\n      px={\n        themeContext &&\n        themeContext.grid &&\n        themeContext.grid.container &&\n        themeContext.grid.container.padding\n      }\n      maxWidth={\n        themeContext &&\n        themeContext.grid &&\n        themeContext.grid.container &&\n        themeContext.grid.container.maxWidth\n      }\n      {...props}\n    />\n  )\n}\n","export interface ThemeGridContainer {\n  maxWidth: number\n  padding: number | any[]\n}\n\nexport interface ThemeGrid {\n  gutter: number | any[]\n  container: ThemeGridContainer\n}\n\nexport const defaultGrid = {\n  gutter: [15, null, 30],\n  container: {\n    maxWidth: 1280,\n    padding: [15, null, 60],\n  },\n}\n"],"names":["Box","styled","div","background","bottom","color","display","flex","fontSize","fontWeight","height","justifyContent","left","maxHeight","maxWidth","minHeight","minWidth","opacity","order","position","right","space","textAlign","top","width","zIndex","Card","backgroundImage","backgroundPosition","backgroundRepeat","backgroundSize","border","borderBottom","borderColor","borderLeft","borderRadius","borderRight","borderTop","boxShadow","transformValue","n","isNaN","Number","inset","style","prop","cssProperty","col","StyledColumn","Flex","alignItems","flexDirection","flexWrap","StyledText","props","singleLine","css","fontFamily","letterSpacing","lineHeight","Text","as","children","React","StyledHeading","classnames","args","join","StyledChildren","className","styledChildren","Children","toArray","map","child","cloneElement","el","Space","gutterLeft","gutterRight","StyledRow","themeContext","useContext","ThemeContext","mx","px","grid","container","padding","gutter","spacing","Array","isArray"],"mappings":"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"}